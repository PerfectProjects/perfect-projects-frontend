service: ${self:custom.prefix}-frontend

frameworkVersion: '2'
# To deploy perfect-projects-frontend first, you need:
# 1. Create certificate and paste its arn to the custom.certificateArn section
# 2. Deploy stack using:  serverless deploy --region eu-central-1 --stage dev
# 3. Build app using: ng build --configuration dev
# 4. Sync s3 using: serverless s3sync --region eu-central-1 --stage dev
# 5. Invalidate CloudFront
provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  variablesResolutionMode: 20210326
  region: ${opt:region}
  stage: ${opt:stage}
  stackName: ${self:custom.prefix}-frontend
  iam:
    role:
      name: ${self:custom.prefix}-frontend-role
      statements:
        - Effect: 'Allow'
          Action: '*'
          Resource: '*'
  deploymentBucket:
    name: ${self:custom.prefix}-deployments
  environment:
    REGION: ${opt:region}
    STAGE: ${opt:stage}

custom:
  prefix: perfect-projects-${self:provider.stage}-${self:provider.region}
  s3Sync:
    # A simple configuration for copying static assets
    - bucketName: ${self:custom.prefix}-frontend # required
      localDir: dist/perfect-projects-frontend # required
  customCertificate:
    certificateName: ${opt:stage}-${opt:region}.perfect-projects.link
    hostedZoneIds: Z046301435EGQHE8A33R6
    region: us-east-1 # This specific region is required due to an error from Serverless Domain Manager
    subjectAlternativeNames:
      - www.${opt:stage}-${opt:region}.perfect-projects.link
      - ${opt:stage}-${opt:region}.perfect-projects.link
  certificateArn:
    dev-eu-central-1: arn:aws:acm:us-east-1:499329456290:certificate/1061dd4f-c76c-43c3-a107-b78d57e0ed39
plugins:
  - serverless-deployment-bucket
  - serverless-certificate-creator
  - serverless-s3-sync

resources:
  Resources:
    ## Specifying the S3 Bucket
    frontendS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.prefix}-frontend
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    frontendS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: frontendS3Bucket
        PolicyDocument:
          Statement:
            -
              Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { Ref : frontendS3Bucket }, "/*" ] ]  }
              Principal:
                AWS: { "Fn::Join" : [" ", ["arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity", { Ref: cloudFrontOriginAccessIdentity } ] ] }
    ## Specifying the CloudFront Distribution to server your Web Application
    frontendCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::Join: [
                    "", [
                    { "Ref": "frontendS3Bucket" },
                    ".s3.amazonaws.com"
                  ]
                ]
              ## An identifier for the origin which must be unique within the distribution
              Id: frontend
              S3OriginConfig:
                OriginAccessIdentity:
                  { "Fn::Join" : ["", ["origin-access-identity/cloudfront/", { Ref: cloudFrontOriginAccessIdentity } ] ]  }
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          Aliases:
            - www.${opt:stage}-${opt:region}.perfect-projects.link
            - ${opt:stage}-${opt:region}.perfect-projects.link
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: frontend
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificateArn.${self:provider.stage}-${self:provider.region}}
            SslSupportMethod: sni-only
    frontendDNSNames:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: Z046301435EGQHE8A33R6
        RecordSets:
          - Name: ${opt:stage}-${opt:region}.perfect-projects.link
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: !GetAtt [ frontendCloudFrontDistribution, DomainName ]
              EvaluateTargetHealth: false
          - Name: www.${opt:stage}-${opt:region}.perfect-projects.link
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: !GetAtt [ frontendCloudFrontDistribution, DomainName ]
              EvaluateTargetHealth: false
    cloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI for ${self:custom.prefix}
